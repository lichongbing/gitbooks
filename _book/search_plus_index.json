{"./":{"url":"./","title":"概述","keywords":"","body":"前言 本书是作者对Java知识生态圈的技术梳理，作者一边在学习并运用工作，一边更新整理。作者由零基础慢慢深入，由浅入深，逐步掌握把握Java知识生态圈，帮助Javaava初学者和爱好者，旨在帮助读者掌握Java基础知识、了解开发技巧并积累一定的项目实战经验。为什么要写这样一本书 荀子曰：“不闻不若闻之，闻之不若见之，见之不若知之，知之不若行之。” 反复实践，反复理解，反复总结，提升自我，帮助大家。2000多年前，孔夫子就曾说过，“学而时习之，不亦说乎？”杨伯峻先生在《论语译注》中对这句话有精辟的注解：“学了，然后（按一定的时间）去实习它，不也高兴吗？”对于Java的学习，也应是这样，仅仅懂得一堆Java语法，毫无意义，我们必须亲自动手实践它。 "},"java5.html":{"url":"java5.html","title":"Java基础","keywords":"","body":"Java基础 Java 开发环境搭建 过上一章的阅读，相信读者对Java语言已经有了大概的了解，本章更进一步地介绍如何在Windows操作系统中下载与安装JDK，并详细描述在Windows操作系统下开发环境的配置。最后介绍如何编译和运行第1个Java程序，再简要介绍在Eclipse环境下如何开发Java程序。 本章要点（已掌握的在方框中打钩） 掌握下载、安装Java开发工具箱 掌握开发环境变量的配置 学会编写第1个Java程序 学会在Eclipse下编写Java程序 1.1 Java开发环境 学习Java的第一步，自然就是要搭建Java开发环境（Java Development Kit，JDK），在操作系统（如Windows、Linux等）下，JDK是搭建Java最基本的开发环境之一，目前由Oracle公司维护开发并免费提供。DK由一个处于操作系统层之上的开发环境和运行环境组成，如下图所示。JDK除了包括编译（javac）、解释（java）、打包（jar）等工具，还包括开发工具及开发工具的应用程序接口等。当Java程序编译完毕后，如果想运行，还需要Java运行环境（Java Runtime Environment，JRE）。JRE是运行Java程序所必需的环境的集合，包含JVM标准实现及Java核心类库。如果仅仅想运行Java程序，安装JRE就够了。也就是说，JRE是面向Java程序的使用者的。但如果想进一步开发Java程序，那就需要安装JDK，它是面向Java程序的开发者的。Java程序的开发者自然也是Java程序的应用者。从下图也容易看出，JDK包含JRE。 由上图可以看出，Java程序开发的第一步就是编写Java语言的源代码。而编写源代码的工具，可以是任何文本编辑器，如Windows 操作系统下的记事本、Linux操作系统下的Vim等。这里推荐读者使用对编程语言支持较好的编辑器，如Notepad++、UltraEdit、Editplus等，这类代码编辑器通常有较好的语法高亮等特性，特别适合开发程序代码。Java源文件编写完毕后，就可以在命令行下，通过javac命令将Java源程序编译成字节码（Byte Code，Java虚拟机执行的一种二进制指令格式文件)，然后通过java命令，来解释执行编译好的Java类文件（文件扩展名为.class）。但如果想正确使用javac和java等命令，用户必须自己搭建Java开发环境。在后续章节，我们将详细介绍相关的配置步骤。为了提高Java的开发效率，目前在市面上也涌现了很多优秀的Java集成开发环境（Integrated Development Environment， IDE），如NetBeans（由Sun公司开发的老牌IDE）、IntelliJIDEA（由捷克软件公司JetBrains开发的智能IDE，需要付费使用）及Eclipse（免费开源的知名IDE）等。IDE在JDK的基础上，为程序提供了很多辅助功能的支持，极大方便了程序的开发。在本章最后部分，我们将简要地介绍最流行的 IDE之一——Eclipse的使用。 1.2 安装Java开发工具箱 Oracle公司提供多种操作系统下的不同版本的JDK。本节主要介绍在Windows操作系统下安装JDK的过程。 1.2.1 下载JDK 但需要提醒读者的是，对于软件开发而言，过度“最新”并非好事，如果你不是有特殊需求，Java 8足够用了。为什么说过度“最新”并非好事呢？这是因为Java 9和Java 10虽然有很多好的新特性，但它依附的生态还没有建立起来。比如说，如果你想学习基于Hadoop的大数据编程，很可能Hadoop的最新版还是由Java 8编译而成，你用Java 10编译出来的程序，难以在Hadoop上运行。所以对于学习编程软件，特别是初学者，我们的建议是保守的，暂时还采用业界广泛使用的Java来编程。事实上，Java 8、 Java 7甚至Java 6，仍在企业界有着广泛应用。作为初级用户，实在没有必要跟风，一定要下载最新的Java版本，因为很多新特性，初学者根本没有机会用到。或许Oracle公司也知Java 9和Java 10的更新幅度太大，而Java 8依然是业界开发的主流，于是，在Java 10 同一个下载网页的下方，Oracle给出了Java 8的下载界面，如下图所示。 "},"java.html":{"url":"java.html","title":"Java知识思维导图","keywords":"","body":"泛型类定义类型\\n * 方法：add、remove、indexof\\n * 数据类型的封箱和拆箱\\n * 因为我们的ArrayList里面数据类型只能承装引用类型：比如要承装int类型，就需要进行转换为Integer类\\n * 自动封箱int直接转换为Integer\\n * 自动拆箱Integer拆箱为int\\n * 11 字符串String\\n * 特殊的引用类型，在java.lang包下面的，不需要进行导入，本身也是一个对象。\\n * 关于字符串的内存分析：String字符串内存是在常量池中不断发生变化的\\n * 字符串的操作：toCharArray、getBytes、indexOf、split、replace\\n * 12 Static关键字\\n * static关键字的使用\\n * 静态关键字static可以修饰成员变量和成员方法以及可以修饰代码块(静态代码块)\\n * 加载时间：静态关键字修复的额任何内容都是和类一起进行加载的（优先级和类加载评级）\\n * 静态关键字修饰的成员变量和方法都可以直接通过：类名.静态变量 类名.静态方法\\n * 静态关键字是属于类的，他不属于某一个对象，但是一旦发生变化，全部都会发生变化\\n * 注意事项\\n * 静态方法不能直接访问普通成员变量或成员方法，只能访问静态所修饰的变量和方法\\n * 反之，普通的成员方法(未被static修饰的方法)可以直接访问类变量或静态方法\\n * 静态方法中，不能使用this关键字\\n * 13 Java的数据类型\\n * java的基础数据类型\\n * 整型\\n * byte\\n * short\\n * int默认的整数类型\\n * long\\n * 浮点型\\n * float(3.14F)\\n * double（默认）\\n * 字符型\\n * char\\n * ASC码表\\n * '0'字符数值为48\\n * 'A'字符数值为65\\n * 'a'字符数值为97\\n * 布尔型\\n\\n\\n\\n\\n\\n```\\n\",\"args\":[],\"kwargs\":{},\"blocks\":[]}\" data-svg-text=\"\"* Java基础-入门篇知识点总结\\n * 数组\\n * 数组：一种容器\\n * 数组的创建\\n * int[] arr = new int[10]\\n * int[] arr = new int []{1,2,3,4,5}\\n * int[] arr = {1,2,3,4,5}\\n * 数组的访问\\n * 索引：从下标0开始的，数组的总长度：数组.length（）\\n * 内存分析\\n * 寄存器\\n * 本地方法栈\\n * 方法区:存放.class文件\\n * 堆内存：java里面所有使用new关键字创建的对象都是存放在堆内存中\\n * 栈：声明的变量都市在栈上去声明的\\n * 关于值传递与引用传递\\n * 值传递：基础数据类型都是值传递\\n * 引用数据类型：都是地址传递 如数组arr\\n * 面向对象的思想\\n * 万事万物皆对象\\n * 面向对象(类和实例的关系) \\n * 类是抽象的，对象是具体的；类相当于一个模板，对象是通过类进行创建的，并且类和对象之间为1对多的关系\\n \\n * 类的详细使用\\n * 成员变量\\n * 成员方法\\n * 构造器\\n * java中默认为每一个类提供默认的无参数的构造器\\n * 也可以定义很多有参数的构造器（方法的重载）\\n * 一个标准的javabean封装\\n * 1 要对成员变量添加private修饰符，表示私有的，其他的外部无法之间访问\\n * 2 必须要自己是想getXXX和setXXX来进行访问看，安全性\\n * 3 java里面默认会为每一个类提供无参的构造器，也可以自己定义有参的构造器\\n * 4 this关键字的作用；永远指代当前的对象(当前实例化的对象)\\n * 10 API的使用\\n * API:应用程序提供访问的接口\\n * 包package：合理划分我们的代码，使我们的代码结构更加清晰\\n * Scanner 扫描类\\n * Random随机类\\n * ArrayList容器类\\n * 基于数组去实现的，并且长度不做限制，ArrayList也只能承装一类数据类型(只能是引用类型)，使用泛型类定义类型\\n * 方法：add、remove、indexof\\n * 数据类型的封箱和拆箱\\n * 因为我们的ArrayList里面数据类型只能承装引用类型：比如要承装int类型，就需要进行转换为Integer类\\n * 自动封箱int直接转换为Integer\\n * 自动拆箱Integer拆箱为int\\n * 11 字符串String\\n * 特殊的引用类型，在java.lang包下面的，不需要进行导入，本身也是一个对象。\\n * 关于字符串的内存分析：String字符串内存是在常量池中不断发生变化的\\n * 字符串的操作：toCharArray、getBytes、indexOf、split、replace\\n * 12 Static关键字\\n * static关键字的使用\\n * 静态关键字static可以修饰成员变量和成员方法以及可以修饰代码块(静态代码块)\\n * 加载时间：静态关键字修复的额任何内容都是和类一起进行加载的（优先级和类加载评级）\\n * 静态关键字修饰的成员变量和方法都可以直接通过：类名.静态变量 类名.静态方法\\n * 静态关键字是属于类的，他不属于某一个对象，但是一旦发生变化，全部都会发生变化\\n * 注意事项\\n * 静态方法不能直接访问普通成员变量或成员方法，只能访问静态所修饰的变量和方法\\n * 反之，普通的成员方法(未被static修饰的方法)可以直接访问类变量或静态方法\\n * 静态方法中，不能使用this关键字\\n * 13 Java的数据类型\\n * java的基础数据类型\\n * 整型\\n * byte\\n * short\\n * int默认的整数类型\\n * long\\n * 浮点型\\n * float(3.14F)\\n * double（默认）\\n * 字符型\\n * char\\n * ASC码表\\n * '0'字符数值为48\\n * 'A'字符数值为65\\n * 'a'字符数值为97\\n * 布尔型\\n\\n\\n\\n\\n\\n\"\"> "},"java6.html":{"url":"java6.html","title":"Java程序要素概览","keywords":"","body":" 初识庐山真面目——Java程序要素概览 麻雀虽小，五脏俱全。本章的实例虽然非常简单，但基本涵盖了本篇所讲的内容。可以通过本章来了解Java程序的组成及内部部件（如Java中的标识符、关键字、变量、注释等）。同时，本章还涉及Java程序错误的检测及Java编程风格的注意事项。 本章要点（已掌握的在方框中打钩） 掌握Java程序的组成 掌握Java程序注释的使用 掌握Java中的标识符和关键字 了解Java中的变量及其设置 了解程序的检测 掌握提高程序可读性的方法 2.1 一个简单的例子 从本章开始，我们正式开启学习Java程序设计的旅程。在本章，除了认识程序的架构外，我们还将介绍标识符、关键字以及一些基本的数据类型。通过简单的范例，让读者了解检测与提高程序可读性的方法，以培养读者良好的编程风格和正确的程序编写习惯。 下面来看一个简单的Java程序。在介绍程序之前，读者先简单回顾一下第1章讲解的例子，之后再来看下面的这个程序，在此基础上理解此程序的主要功能。 /** * @ClassName: TestJava * @Description: 这是Java的一个简单范例 * @author: YuHong * @date: 2016年11月15日 */ public class TestJava { public static void main(String args[ ]) { int num ; // 声明一个整型变量num num = 5 ; // 将整型变量赋值为5 // 输出字符串，这里用“+” 号连接变量 System.out.println(\"这是数字 \" + num); System.out.println(\"我有 \" + num + \"本书！\"); } } "},"java7.html":{"url":"java7.html","title":"Java编程基础","keywords":"","body":"九层之台，起于垒土——Java编程基础 本章讲解Java中的基础语法，包括常量和变量的声明与应用、变量的命名规则、Java的基本数据类型和数据类型的转换等。本章内容是接下来章节的基础，初学者应该认真学习。 本章要点（已掌握的在方框中打钩） 掌握常量和变量的声明方法 掌握变量的命名规则 掌握变量的作用范围 掌握基本数据类型的使用 Java语言强大灵活，与C++语言语法有很多相似之处。但要想熟练使用Java语言，就必须从了解Java语言基础开始，就如同老子在《道德经》说的那样，“合抱之木，生于毫末；九层之台，起于垒土；千里之行，始于足下。” 南宋的史学家和文学家范晔在《后汉书·郭太传》中也有言，“墙高基下，虽得必失”，说的就是，高耸的大墙，其基础却十分低矮，这样的墙虽然建成了，但一定会倒塌。同样，想要学好Java，一定要打好坚实的基础，没有坚实的基础，很容易留下后患，比如成为制约变成Java高手的瓶颈。 在接下来的章节里，我们主要讨论Java的基础语法， "},"java8.html":{"url":"java8.html","title":"基础编程元素--运算符 表达式 语句与流程控制","keywords":"","body":"基础编程元素——运算符、表达式、语句与流程控制 运算符、表达式、语句与流程控制，是Java的基础编程元素，无论多复杂的编程框架和GUI，追根溯源，都是由这些基本元素构成的。本章介绍Java运算符的用法、表达式与运算符之间的关系以及程序的流程控制等。学完本章，读者能对Java语句的运作过程有更深一层的认识。 本章要点（已掌握的在方框中打钩） 掌握各种运算符的用法 掌握各种表达式的用法 掌握表达式与运算符的关系 ( 掌握程序结构的3种模式 4.1 运算符 设计程序的目的，简单来说，就是让机器实施运算，而程序语言中提供运算功能的就是运算符（operator）。在最底层，Java中的数据都是通过这些运算符来完成计算的。 "},"java9.html":{"url":"java9.html","title":"常用的数据结构--数组与枚举","keywords":"","body":"常用的数据结构——数组与枚举 数组与枚举是Java中一种常见的数据结构，分为一维数组、二维数组及多维数组等几种。只有灵活掌握数组与枚举的应用，才能编写出更强大、效率更高的Java程序。本章将介绍在Java中使用数组与枚举的相关知识，其包括数组的声明和定义、枚举的定义和使用等。 本章要点（已掌握的在方框中打钩） 掌握一维数组的使用 掌握二维数组的使用 了解数组越界的风险 熟悉多维数组的使用 掌握枚举的概念 熟悉枚举的作用5.1 理解数组 试想一下，如果编写一个程序，需要存储12个月份的天数，是否要定义12个变量呢？如果编写一个扑克程序，里面应该需要存储54张扑克的信息，是否要定义54个变量？而如果程序需要存储成千上万的数据，程序员是不是也要逐一定义成千上万个变量？如果这样做，一是工程量太大，二是这些逐一定义的变量之间彼此独立，没有任何内在联系，这会给维护这些变量带来巨大的困难，有时 "},"java10.html":{"url":"java10.html","title":"面向对象设计的核心--类与对象","keywords":"","body":"面向对象设计的核心——类和对象 类和对象是面向对象编程语言的重要概念。Java是一种面向对象的语言，所以要想熟练使用Java语言，就一定要掌握类和对象的使用。本章介绍面向对象基本的概念，面向对象的3个重要特征（封装性、继承性、多态性）以及声明创建类和对象（数组）的方法。 本章要点（已掌握的在方框中打钩） 了解类和对象的相关概念 掌握声明及创建类和对象的方法 掌握对象的比较方法 到目前为止，前面介绍的语法都属于编程语言的基本功能，其中包括数据类型和程序控制语句等。随着计算机的发展，面向对象的概念产生。类（class）和对象（object）是面向对象程序设计十分重要的概念。要深入了解Java程序语言，一定要树立面向对象程序设计的观念。从本章开始学习Java程序中类的设计及对象的使用。 6.1 理解面向对象程序设计 面向对象程序设计（Object Oriented Programming，OOP）是继面向过程又一具有里程碑意义的编程思想,是现实世界模型的自然延伸。下面从结构化程序设计说起，逐步展示面向对象程序设计。 "},"java11.html":{"url":"java11.html","title":"重复调用的代码块--方法","keywords":"","body":"重复调用的代码块——方法 在面向对象的程序设计中，方法是一个很重要的概念，体现了面向对象三大要素中“封装”的思想。“方法”又称为“函数”，在其他的编程语言中都有类似的概念，其重要性是不言而喻的。在本章读者将会学到如何定义和使用方法，以及学会使用方法的再一次抽象——代码块。除此之外，方法中对数组的应用也是本章讨论的重点。 本章要点（已掌握的在方框中打钩） 掌握方法的定义和使用 掌握构造方法的使用 掌握普通代码块、构造代码块、静态块的意义和基本使用 掌握在方法中对数组的操作 通过对前面章节的学习，读者应该了解，在本质上，一个类其实就描述了两件事情：① 一个对象知道什么（what's an object knows）？② 一个对象能做什么（what's an object does）？第①件事情，对应于对象的属性（或状态）；第②件事情对应于对象的行为（或方法）。下面用范例7-1来说明类的这两个层面。 "}}